const navbarHtml = `
  <!-- navbar.html -->
<nav class="navbar navbar-expand-lg navbar-dark bg-dark sticky-top">
  <div class="container-fluid">
    <a class="navbar-brand" href="index.html">ShopNow</a>
    <button
      class="navbar-toggler"
      type="button"
      data-bs-toggle="collapse"
      data-bs-target="#navbarNav"
    >
      <span class="navbar-toggler-icon"></span>
    </button>
    <div
      class="collapse navbar-collapse justify-content-between"
      id="navbarNav"
    >
      <ul class="navbar-nav">
        <li class="nav-item">
          <a class="nav-link" href="index.html">–ì–æ–ª–æ–≤–Ω–∞</a>
        </li>
        <li class="nav-item">
          <a class="nav-link active" href="products.html">–¢–æ–≤–∞—Ä–∏</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="game/game.html">–ì—Ä–∞</a>
        </li>
      </ul>
      <button
        id="open_cart"
        class="btn btn-outline-light"
        data-bs-toggle="modal"
        data-bs-target="#ModalBasket"
        style="display:none"
      >
        üõí –ö–æ—à–∏–∫
      </button>
      <div class="d-flex align-items-center gap-2">
        <button
          type="button"
          class="btn btn-primary loginB"
          data-bs-toggle="modal"
          data-bs-target="#LoginModal"
        >
          Login
        </button>
        <div id="loginAs" style="display: none">
          <p class="mb-0 text-white">Logined as: <b></b></p>
          <button type="button" class="btn btn-sm btn-warning logOut">
            Log Out
          </button>
        </div>
      </div>
    </div>
  </div>
</nav>
<!--Modal Login-->
    <div
      class="modal fade"
      id="LoginModal"
      tabindex="-1"
      role="dialog"
      aria-labelledby="LoginModalTitle"
      aria-hidden="true"
    >
      <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <div class="d-flex justify-content-center w-100">
              <h5 class="modal-title" id="LoginModalTitle">
                Login/Sign up form
              </h5>
            </div>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <form>
              <div class="form-outline mb-4">
                <label class="form-label" for="loginField">Login</label>
                <input id="loginField" class="form-control" />
              </div>
              <div class="form-outline mb-4">
                <label class="form-label" for="passwordField">Password</label>
                <input
                  type="password"
                  id="passwordField"
                  class="form-control"
                />
                <div id="message" style="display: none">
                  <h6 class="mt-2">Password must contain the following:</h6>
                  <p id="letter" class="invalid">A <b>lowercase</b> letter</p>
                  <p id="capital" class="invalid">A <b>capital letter</b></p>
                  <p id="number" class="invalid">A <b>number</b></p>
                  <p id="length" class="invalid">Minimum <b>8 characters</b></p>
                </div>
              </div>
              <div class="d-flex justify-content-center">
                <button id="loginButton" type="button" class="btn btn-primary">
                  Sign in
                </button>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </div>

    <!--top/up arrow-->
    <div id="top" style="display: none"></div>

<a href="#top" id="up">
  ‚¨Ü
</a>

<div id="chatbot" class="chatbot">
  <div class="chat-header">ü§ñ –ß–∞—Ç-–±–æ—Ç</div>
  <div class="chat-body" id="chatBody"></div>
  <div class="chat-input">
    <input type="text" id="chatInput" placeholder="–ù–∞–ø–∏—à—ñ—Ç—å —â–æ—Å—å..." />
    <button id="sendChat">‚û°Ô∏è</button>
  </div>
</div>
<button id="chatToggle" title="–í—ñ–¥–∫—Ä–∏—Ç–∏ —á–∞—Ç">üí¨</button>
`;
function highlightActiveNavLink() {
  let currentPage = window.location.pathname.split("/").pop();
  if (!currentPage || currentPage === "") {
    currentPage = "index.html";
  }
  document.querySelectorAll(".navbar-nav .nav-link").forEach((link) => {
    const href = link.getAttribute("href");
    if (!href) return;

    const hrefPage = href.split("/").pop();
    if (currentPage === hrefPage) {
      link.classList.add("active");
    } else {
      link.classList.remove("active");
    }
  });
}
function lazyLoad() {
  const lazyImages = document.querySelectorAll("img.lazy-img");

  function isInViewport(el) {
    const rect = el.getBoundingClientRect();
    return rect.top < window.innerHeight && rect.bottom > 0;
  }

  lazyImages.forEach((img) => {
    if (isInViewport(img)) {
      img.src = img.dataset.src;
      img.classList.add("show");
    } else {
      window.addEventListener("scroll", function handler() {
        if (isInViewport(img)) {
          img.src = img.dataset.src;
          img.classList.add("show");
          window.removeEventListener("scroll", handler);
        }
      });
    }
  });
}
document.addEventListener("DOMContentLoaded", () => {
  const placeholder = document.getElementById("navbar-placeholder");
  if (placeholder) {
    //navbar
    placeholder.innerHTML = navbarHtml;
    highlightActiveNavLink();
    //login
    const loginScript = document.createElement("script");
    loginScript.src = "/ShopNow/login.js";

    const styleLink = document.createElement("link");
    styleLink.rel = "stylesheet";
    styleLink.href = "/ShopNow/navbarstyle.css";

    document.head.appendChild(styleLink);
    document.body.appendChild(loginScript);
    loginScript.onload = () => {
      if (
        document.querySelector(".loginB") &&
        document.getElementById("loginAs") &&
        document.getElementById("loginField") &&
        document.getElementById("passwordField") &&
        document.getElementById("message")
      ) {
        checkIfLogin();
        initLoginListeners();

        const loginBtn = document.querySelector(".loginB");
        if (loginBtn) {
          loginBtn.addEventListener("click", () => {
            const modal = new bootstrap.Modal(
              document.getElementById("LoginModal")
            );
            modal.show();
          });
        }
      }
    };

    document.body.appendChild(loginScript);

    const openCartBtn = document.getElementById("open_cart");
    if (typeof openCart === "function" && openCartBtn) {
      openCartBtn.addEventListener("click", openCart);
    }
  }
  lazyLoad();
  $(document).ready(function () {
    const $up = $("#up");

    $(window).on("scroll", function () {
      if ($(this).scrollTop() > 200) {
        if (!$up.is(":visible")) {
          $up.fadeIn(300);
        }
      } else {
        if ($up.is(":visible")) {
          $up.fadeOut(300);
        }
      }
    });

    $up.on("click", function (e) {
      e.preventDefault();
      $("html, body").animate({ scrollTop: 0 }, 500);
    });
    const phrases = [
      "–¶—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è!",
      "–Ø —â–µ –≤—á—É—Å—è",
      "–°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏.",
      "–ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ",
      "–ó–≤—É—á–∏—Ç—å —Ü—ñ–∫–∞–≤–æ!",
      "–ù–∞ –∂–∞–ª—å, —è –ø–æ–∫–∏ –Ω–µ –º–∞—é —Ç–æ—á–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.",
      "–ú–æ–∂–ª–∏–≤–æ, –≤–∞–º –≤–∞—Ä—Ç–æ –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞—à–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
    ];
    function containsAny(str, keywords) {
      return keywords.some((word) => str.includes(word));
    }
    function botReply(msg) {
      const lc = msg.toLowerCase().trim();

      if (
        containsAny(lc, [
          "–ø—Ä–∏–≤—ñ—Ç",
          "–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è",
          "–¥–æ–±—Ä–∏–π –¥–µ–Ω—å",
          "–¥–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞",
          "–¥–æ–±—Ä–∏–π –≤–µ—á—ñ—Ä",
          "–¥–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É",
          "–¥–æ–±—Ä–∏–π —Ä–∞–Ω–æ–∫",
          "–≤—ñ—Ç–∞—é",
        ])
      )
        return "–í—ñ—Ç–∞—é! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?";

      if (containsAny(lc, ["–¥–æ –ø–æ–±–∞—á–µ–Ω–Ω—è", "–±—É–≤–∞–π"]))
        return "–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!";
      if (containsAny(lc, ["iphone", "–∞–π—Ñ–æ–Ω"]))
        return "iPhone ‚Äî —Ü–µ –ø—Ä–µ–º—ñ–∞–ª—å–Ω—ñ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∏ –≤—ñ–¥ Apple. –£ –Ω–∞—Å –∑–∞–≤–∂–¥–∏ —î –∞–∫—Ç—É–∞–ª—å–Ω—ñ –º–æ–¥–µ–ª—ñ!";
      if (lc.includes("samsung"))
        return "Samsung –ø—Ä–æ–ø–æ–Ω—É—î —à–∏—Ä–æ–∫–∏–π –≤–∏–±—ñ—Ä —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ñ–≤ –Ω–∞ Android ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥.";
      if (lc.includes("xiaomi") || lc.includes("—Ä–µ–¥–º—ñ") || lc.includes("redmi"))
        return "Xiaomi —Ç–∞ Redmi ‚Äî —Ü–µ —á—É–¥–æ–≤–µ –ø–æ—î–¥–Ω–∞–Ω–Ω—è —è–∫–æ—Å—Ç—ñ —Ç–∞ —Ü—ñ–Ω–∏! –ü–æ–¥–∏–≤—ñ—Ç—å—Å—è –Ω–∞—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.";
      if (lc.includes("—Ü—ñ–Ω–∞") || lc.includes("—Å–∫—ñ–ª—å–∫–∏"))
        return "–¶—ñ–Ω–∏ –≤–∫–∞–∑–∞–Ω—ñ –±—ñ–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É. –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ó—Ö —É –∫–∞—Ç–∞–ª–æ–∑—ñ.";
      if (lc.includes("–¥–æ—Å—Ç–∞–≤–∫–∞"))
        return "–ú–∏ –¥–æ—Å—Ç–∞–≤–ª—è—î–º–æ –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ! –®–≤–∏–¥–∫–æ —Ç–∞ –∑—Ä—É—á–Ω–æ.";
      if (lc.includes("—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç"))
        return "–ù–∞—à –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∞—Ü—é—î 24/7 ‚Äî –≤–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–ª–∞–π–Ω.";
      return phrases[Math.floor(Math.random() * phrases.length)];
    }

    function appendMessage(sender, text) {
      const div = $("<div>").addClass(sender).text(text);
      $("#chatBody").append(div);
      $("#chatBody").scrollTop($("#chatBody")[0].scrollHeight);
    }

    $("#chatToggle").click(() => {
      $("#chatbot").fadeToggle();
    });

    $("#sendChat").click(() => {
      const msg = $("#chatInput").val().trim();
      if (!msg) return;
      appendMessage("user", msg);
      const reply = botReply(msg);
      setTimeout(() => appendMessage("bot", reply), 400);
      $("#chatInput").val("");
    });

    $("#chatInput").keypress((e) => {
      if (e.key === "Enter") $("#sendChat").click();
    });
  });
});